const { CommandInteraction, Client, MessageEmbed } = require("discord.js");
const { COLOR } = require("../../config.json");

module.exports = {
  name: "giveaway",
  description: "–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—Ä–∏–∑–æ–≤.",
  permission: "ADMINISTRATOR",
  options: [
    {
      name: "start",
      description: "–ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.",
      type: "SUB_COMMAND",
      options: [
        {
          name: "duration",
          description: "–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. (1—á30–º)",
          type: "STRING",
          required: true,
        },
        {
          name: "winners",
          description: "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–∏–¥–µ—Ç–µ–ª–µ–π.",
          type: "INTEGER",
          required: true,
        },
        {
          name: "prize",
          description: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞.",
          type: "STRING",
          required: true,
        },
        {
          name: "channel",
          description:
            "–£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.",
          type: "CHANNEL",
          channelTypes: ["GUILD_TEXT"],
        },
      ],
    },
    {
      name: "actions",
      description: "–î–µ–π—Å—Ç–≤–∏—è —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º.",
      type: "SUB_COMMAND",
      options: [
        {
          name: "options",
          description: "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
          type: "STRING",
          required: true,
          choices: [
            {
              name: "end",
              value: "end",
            },
            {
              name: "pause",
              value: "pause",
            },
            {
              name: "unpause",
              value: "unpause",
            },
            {
              name: "reroll",
              value: "reroll",
            },
            {
              name: "delete",
              value: "delete",
            },
          ],
        },
        {
          name: "message_id",
          description: "–£–∫–∞–∂–∏—Ç–µ id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º.",
          type: "STRING",
          required: true,
        },
      ],
    },
  ],
  /**
   *
   * @param {CommandInteraction} interaction
   * @param {Client} client
   */
  execute(interaction, client) {
    const { options } = interaction;
    const Sub = options.getSubcommand();

    const errorEmbed = new MessageEmbed()
      .setColor("RED")
      .setTitle("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞!")
      .setThumbnail(
        "https://cdn.discordapp.com/attachments/823226730365583422/975819132094251088/Group_259.png"
      );

    const successEmbed = new MessageEmbed().setColor(COLOR);

    const optionsGiveaway = {
      lastChance: {
        enabled: true,
        content: "‚ö†Ô∏è **–ü–û–°–õ–ï–î–ù–ò–ô –®–ê–ù–°, –ß–¢–û–ë–´ –£–°–ü–ï–¢–¨!** ‚ö†Ô∏è",
        threshold: 5000,
        embedColor: COLOR,
      },
      pauseOptions: {
        isPaused: true,
        content: "‚ö†Ô∏è **–†–û–ó–´–ì–†–´–® –ü–†–ò–û–°–¢–ê–ù–û–í–õ–ï–ù** ‚ö†Ô∏è",
        unPauseAfter: null,
        embedColor: "#FFFF00",
        infiniteDurationText: "`NEVER`",
      },
      messages: {
        giveaway: "üéâüéâ **–†–û–ó–´–ì–†–´–®** üéâüéâ",
        giveawayEnded: "üéâüéâ **–†–û–ó–´–ì–†–´–® –û–ö–û–ù–ß–ï–ù** üéâüéâ",
        drawing: "–û–∫–æ–Ω—á–∞–Ω–∏–µ: {timestamp}",
        dropMessage: "–£—Å–ø–µ–π—Ç–µ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏, –Ω–∞–∂–∞–≤ –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é!",
        inviteToParticipate: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ `üéâ`, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!",
        winMessage:
          ":tada: –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, {winners}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{this.prize}**!\n{this.messageURL}",
        embedFooter: "{this.winnerCount} –ø–æ–±–µ–¥–∏—Ç–µ–ª—å(–µ–π)",
        noWinner: "–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–±–∏–¥–µ—Ç–µ–ª—è –Ω–µ—Ç.",
        hostedBy: "–ù–∞—á–∞–ª —Ä–æ–∑—ã–≥—Ä—ã—à: {this.hostedBy}",
        winners: "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å(–∏):",
        endedAt: "–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑",
      },
      rerollOptions: {
        congrat:
          ":tada: –ù–æ–≤—ã–π(—ã–µ) –ø–æ–±–∏–¥–∏—Ç–µ–ª–∏: {winners}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{this.prize}**!\n{this.messageURL}",
        error: "–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω, –ø–æ–±–∏–¥–µ—Ç–µ–ª—è –Ω–µ—Ç.",
      },
    };

    switch (Sub) {
      case "start":
        {
          const gchannel = options.getChannel("channel") || interaction.channel;
          const duration = options.getString("duration");
          const winnerCount = options.getInteger("winners");
          const prize = options.getString("prize");

          client.giveawaysManager
            .start(gchannel, {
              duration: ms(duration),
              winnerCount,
              prize,
              lastChance: optionsGiveaway.lastChance,
              pauseOptions: optionsGiveaway.pauseOptions,
              messages: optionsGiveaway.messages,
            })
            .then((gData) => {
              successEmbed.setDescription("–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç.");
              interaction.reply({ embeds: [successEmbed], ephemeral: true });
            })
            .catch((err) => {
              errorEmbed.setDescription(
                `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
              );
              interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            });
        }
        break;

      case "actions":
        {
          const choice = options.getString("options");
          const message_id = options.getString("message_id");
          const giveaway = client.giveawaysManager.giveaways.find(
            (g) =>
              g.guildId === interaction.guildId && g.messageId === message_id
          );

          if (!giveaway) {
            errorEmbed.setDescription(
              `–Ø –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è (${message_id})...\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`
            );
            interaction.reply({ embeds: [errorEmbed], ephemeral: true });
          }
          switch (choice) {
            case "end":
              {
                client.giveawaysManager
                  .end(message_id)
                  .then(() => {
                    successEmbed.setDescription("–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω.");
                    interaction.reply({
                      embeds: [successEmbed],
                      ephemeral: true,
                    });
                  })
                  .catch((err) => {
                    errorEmbed.setDescription(
                      `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
                    );
                    interaction.reply({
                      embeds: [errorEmbed],
                      ephemeral: true,
                    });
                  });
              }
              break;
            case "pause":
              {
                client.giveawaysManager
                  .pause(message_id)
                  .then(() => {
                    successEmbed.setDescription(
                      "–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                    );
                    interaction.reply({
                      embeds: [successEmbed],
                      ephemeral: true,
                    });
                  })
                  .catch((err) => {
                    errorEmbed.setDescription(
                      `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
                    );
                    interaction.reply({
                      embeds: [errorEmbed],
                      ephemeral: true,
                    });
                  });
              }
              break;
            case "unpause":
              {
                client.giveawaysManager
                  .unpause(message_id)
                  .then(() => {
                    successEmbed.setDescription(
                      "–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                    );
                    interaction.reply({
                      embeds: [successEmbed],
                      ephemeral: true,
                    });
                  })
                  .catch((err) => {
                    errorEmbed.setDescription(
                      `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
                    );
                    interaction.reply({
                      embeds: [errorEmbed],
                      ephemeral: true,
                    });
                  });
              }
              break;
            case "reroll":
              {
                client.giveawaysManager
                  .reroll(message_id, {
                    messages: optionsGiveaway.rerollOptions,
                  })
                  .then(() => {
                    successEmbed.setDescription(
                      "–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ä–∞–∑—ã–≥—Ä–∞–Ω."
                    );
                    interaction.reply({
                      embeds: [successEmbed],
                      ephemeral: true,
                    });
                  })
                  .catch((err) => {
                    errorEmbed.setDescription(
                      `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
                    );
                    interaction.reply({
                      embeds: [errorEmbed],
                      ephemeral: true,
                    });
                  });
              }
              break;
            case "delete":
              {
                client.giveawaysManager
                  .delete(message_id)
                  .then(() => {
                    successEmbed.setDescription("–†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");
                    interaction.reply({
                      embeds: [successEmbed],
                      ephemeral: true,
                    });
                  })
                  .catch((err) => {
                    errorEmbed.setDescription(
                      `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
                    );
                    interaction.reply({
                      embeds: [errorEmbed],
                      ephemeral: true,
                    });
                  });
              }
              break;
          }
        }
        break;

      default: {
        console.log("Error in giveaway command.");
      }
    }
  },
};

/**
 *
 * @param {String} value
 * @returns Time in ms
 */
function ms(value) {
  const convert_time = {
    —Å: 1,
    s: 1,
    –º: 60,
    m: 60,
    —á: 3600,
    h: 3600,
    –¥: 86400,
    d: 86400,
  };

  let time = 0;

  const regMute = new RegExp("[0-9]+[–î–¥Dd–ß—áHH–ú–ºMm–°—ÅSs]", "g");
  const regNumber = new RegExp("[0-9]+", "g");
  let foundtime = [...value.matchAll(regMute)];
  for (let match of foundtime) {
    const matchValue = match[0];
    const textValue = (
      (matchValue || "s")[(matchValue?.length || 1) - 1] || "c"
    ).toLowerCase();
    time +=
      parseInt((matchValue?.match(regNumber) || ["1"])[0] || "1") *
      convert_time[textValue];
  }
  time *= 1000;
  return time;
}
