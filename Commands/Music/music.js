const { CommandInteraction, MessageEmbed, Client } = require("discord.js");
const { COLOR } = require("../../config.json");

module.exports = {
  name: "music",
  description: "–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.",
  permission: "ADMINISTRATOR",
  options: [
    {
      name: "play",
      description: "–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏.",
      type: "SUB_COMMAND",
      options: [
        {
          name: "query",
          description: "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Å–Ω—é.",
          type: "STRING",
          required: true,
        },
      ],
    },
    {
      name: "volume",
      description: "–£–∫–∞–∂–∏—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏.",
      type: "SUB_COMMAND",
      options: [
        {
          name: "percent",
          description: "–£–∫–∞–∂–∏—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏. 10 = 10%.",
          type: "INTEGER",
          required: true,
        },
      ],
    },
    {
      name: "settings",
      description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É–∑—ã–∫–∏.",
      type: "SUB_COMMAND",
      options: [
        {
          name: "options",
          description: "–í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.",
          type: "STRING",
          required: true,
          choices: [
            { name: "#Ô∏è‚É£ –û—á–µ—Ä–µ–¥—å", value: "queue" },
            { name: "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", value: "skip" },
            { name: "‚è∏ –ü–∞—É–∑–∞", value: "pause" },
            { name: "‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", value: "resume" },
            { name: "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", value: "stop" },
            { name: "üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å", value: "shuffle" },
            { name: "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", value: "RepeatMode" },
          ],
        },
      ],
    },
  ],
  /**
   *
   * @param {CommandInteraction} interaction
   * @param {Client} client
   */
  async execute(interaction, client) {
    const { options, member, guild, channel } = interaction;
    const VoiceChannel = member.voice.channel;

    if (!VoiceChannel)
      return interaction.reply({
        content:
          "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
        ephemeral: true,
      });

    if (
      guild.me.voice.channelId &&
      VoiceChannel.id !== guild.me.voice.channelId
    )
      return interaction.reply({
        content: `–Ø —É–∂–µ –∏–≥—Ä–∞—é –º—É–∑—ã–∫—É –≤ <#${guild.me.voice.channelId}>`,
        ephemeral: true,
      });

    try {
      switch (options.getSubcommand()) {
        case "play": {
          const queue = await client.distube.getQueue(VoiceChannel);
          client.distube.play(VoiceChannel, options.getString("query"), {
            textChannel: channel,
            member: member,
          });
          return interaction.reply({
            content: "üîé –ü–æ–∏—Å–∫ –ø–µ—Å–Ω–∏...",
            ephemeral: true,
          });
        }
        case "volume": {
          const Volume = options.getInteger("percent");
          if (Volume > 100 || Volume < 1)
            return interaction.reply({
              content: "–ì—Ä–æ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100.",
            });

          client.distube.setVolume(VoiceChannel, Volume);

          return interaction.reply({
            content: `–ì—Ä–æ–º–∫–æ—Å—Ç—å –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ \`${Volume}%\``,
            ephemeral: true,
          });
        }
        case "settings": {
          const queue = await client.distube.getQueue(VoiceChannel);

          if (!queue)
            return interaction.reply({
              content: `‚õî –û—á–µ—Ä–µ–¥—å –≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`,
              ephemeral: true,
            });

          switch (options.getString("options")) {
            case "skip":
              await queue.skip(VoiceChannel);
              return interaction.reply({
                embeds: [
                  new MessageEmbed()
                    .setColor(COLOR)
                    .setTimestamp()
                    .setFooter({
                      text: member.displayName,
                      iconURL: member.displayAvatarURL({ dyname: true }),
                    })
                    .setDescription(
                      `<:xi_skip:977518489755590657> | –ü–µ—Å–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.`
                    ),
                ],
              });

            case "stop":
              await queue.stop(VoiceChannel);
              return interaction.reply({
                content: "‚èπ –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
              });
            case "pause":
              await queue.pause(VoiceChannel);
              return interaction.reply({
                content: "‚è∏ –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É.",
              });
            case "resume":
              await queue.resume(VoiceChannel);
              return interaction.reply({
                content: "‚ñ∂ –ú—É–∑—ã–∫–∞ –±—ã–ª–∞ —Å–Ω–æ–≤–∞ –∏–≥—Ä–∞–µ—Ç.",
              });
            case "shuffle":
              await queue.shuffle(VoiceChannel);
              return interaction.reply({
                content: "üîÄ –û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—à–µ–Ω–∞.",
              });
            case "RepeatMode":
              let mode = await client.distube.setRepeatMode(queue);
              mode = mode
                ? mode === 2
                  ? "–í—Å—è –æ—á–µ—Ä–µ–¥—å"
                  : "–≠—Ç–∞ –ø–µ—Å–Ω—è"
                : "–í—ã–∫–ª—é—á–µ–Ω–æ";
              return interaction.reply({
                content: `üîÅ –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ \`${mode}\``,
              });
            case "queue":
              return interaction
                .reply({
                  embeds: [
                    new MessageEmbed()
                      .setColor(COLOR)
                      .setTimestamp()
                      .setFooter({
                        text: member.displayName,
                        iconURL: member.displayAvatarURL({ dynamic: true }),
                      })
                      .setDescription(
                        `${queue.songs.map(
                          (song, id) =>
                            `\n**${id + 1}**. ${song.name} - \`${
                              song.formattedDuration
                            }\``
                        )})`
                      ),
                  ],
                })
                .catch((err) => {
                  console.log(err);
                  interaction.reply({
                    embeds: [
                      new MessageEmbed()
                        .setColor("RED")
                        .setTitle("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞!")
                        .setDescription(
                          `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
                        )
                        .setThumbnail(
                          "https://cdn.discordapp.com/attachments/823226730365583422/975819132094251088/Group_259.png"
                        ),
                    ],
                    ephemeral: true,
                  });
                });
          }
        }
      }
    } catch (err) {
      return interaction.reply({
        embeds: [
          new MessageEmbed()
            .setColor("RED")
            .setTitle("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞!")
            .setDescription(
              `–°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err}`
            )
            .setThumbnail(
              "https://cdn.discordapp.com/attachments/823226730365583422/975819132094251088/Group_259.png"
            ),
        ],
        ephemeral: true,
      });
    }
  },
};
